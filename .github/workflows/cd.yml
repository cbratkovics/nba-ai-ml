name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=staging-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_PRIVATE_KEY }}
        DOCKER_IMAGE: ${{ steps.meta.outputs.tags }}
      run: |
        echo "$STAGING_KEY" > staging_key
        chmod 600 staging_key
        
        ssh -i staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          
          # Update staging environment
          cd /opt/nba-ai-ml
          
          # Update docker-compose with new image
          sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}|" docker-compose.staging.yml
          
          # Deploy with zero-downtime
          docker-compose -f docker-compose.staging.yml up -d --no-deps nba-api
          
          # Wait for health check
          sleep 30
          curl -f http://localhost:8000/health/status || exit 1
          
          # Run post-deployment tests
          docker run --rm --network nba-network \
            -e API_URL=http://nba-api:8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} \
            python -m tests.smoke_tests
        EOF
        
        rm staging_key
    
    - name: Run staging smoke tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
        API_KEY: ${{ secrets.STAGING_API_KEY }}
      run: |
        curl -f "$STAGING_URL/health/status" || exit 1
        
        # Test prediction endpoint
        curl -X POST "$STAGING_URL/v1/predict" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: $API_KEY" \
          -d '{
            "player_id": "203999",
            "game_date": "2025-01-20",
            "opponent_team": "LAL"
          }' || exit 1
    
    - name: Notify staging deployment
      if: success()
      run: |
        echo "Staging deployment successful!"
        echo "URL: ${{ secrets.STAGING_URL }}"

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    needs: []
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          latest
    
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_ENV=production
          VERSION=${{ github.ref_name }}
    
    - name: Deploy to production (Blue-Green)
      env:
        PROD_HOST: ${{ secrets.PRODUCTION_HOST }}
        PROD_USER: ${{ secrets.PRODUCTION_USER }}
        PROD_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
        DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
      run: |
        echo "$PROD_KEY" > prod_key
        chmod 600 prod_key
        
        ssh -i prod_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << 'EOF'
          set -e
          
          # Pull latest image
          docker pull ${{ env.DOCKER_IMAGE }}
          
          cd /opt/nba-ai-ml
          
          # Create new environment file
          cp .env.production .env.blue
          
          # Update docker-compose for blue deployment
          sed -i "s|image: .*|image: ${{ env.DOCKER_IMAGE }}|" docker-compose.blue.yml
          
          # Start blue environment
          docker-compose -f docker-compose.blue.yml up -d
          
          # Wait for blue to be healthy
          sleep 60
          
          # Test blue environment
          for i in {1..10}; do
            if curl -f http://localhost:8001/health/status; then
              echo "Blue environment is healthy"
              break
            fi
            sleep 10
          done
          
          # Switch traffic to blue (update load balancer)
          # This would typically update nginx config or cloud load balancer
          sudo nginx -s reload
          
          # Wait for traffic to drain from green
          sleep 30
          
          # Stop green environment
          docker-compose -f docker-compose.green.yml down
          
          # Promote blue to green
          cp docker-compose.blue.yml docker-compose.green.yml
          cp .env.blue .env.production
          
          echo "Blue-Green deployment completed successfully"
        EOF
        
        rm prod_key
    
    - name: Run production smoke tests
      env:
        PROD_URL: ${{ secrets.PRODUCTION_URL }}
        API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
      run: |
        # Health check
        curl -f "$PROD_URL/health/status" || exit 1
        
        # Test prediction endpoint
        response=$(curl -X POST "$PROD_URL/v1/predict" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: $API_KEY" \
          -d '{
            "player_id": "203999",
            "game_date": "2025-01-20",
            "opponent_team": "LAL"
          }' -w "%{http_code}" -o response.json)
        
        if [ "$response" != "200" ]; then
          echo "Prediction endpoint test failed"
          cat response.json
          exit 1
        fi
        
        # Validate response structure
        python -c "
        import json
        with open('response.json') as f:
            data = json.load(f)
        assert 'predictions' in data
        assert 'confidence' in data
        assert data['confidence'] > 0
        print('Production smoke tests passed!')
        "
    
    - name: Update model registry
      env:
        PROD_URL: ${{ secrets.PRODUCTION_URL }}
        API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
      run: |
        # Register new model version
        curl -X POST "$PROD_URL/v1/models/register" \
          -H "Content-Type: application/json" \
          -H "X-API-Key: $API_KEY" \
          -d '{
            "version": "${{ github.ref_name }}",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}",
            "deployed_at": "'$(date -Iseconds)'"
          }'
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## NBA AI/ML Production Release ${{ github.ref_name }}
          
          ### Changes
          - Automated production deployment
          - Model version: ${{ github.ref_name }}
          - Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          ### Deployment Info
          - Deployed at: $(date -Iseconds)
          - Environment: Production
          - Strategy: Blue-Green deployment
          
          ### Testing
          - ✅ Smoke tests passed
          - ✅ Health checks passed
          - ✅ Model registry updated
        draft: false
        prerelease: false

  rollback-production:
    runs-on: ubuntu-latest
    name: Rollback Production
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Rollback to previous version
      env:
        PROD_HOST: ${{ secrets.PRODUCTION_HOST }}
        PROD_USER: ${{ secrets.PRODUCTION_USER }}
        PROD_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
      run: |
        echo "$PROD_KEY" > prod_key
        chmod 600 prod_key
        
        ssh -i prod_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << 'EOF'
          cd /opt/nba-ai-ml
          
          # Start previous green environment
          docker-compose -f docker-compose.green.yml up -d
          
          # Wait for health check
          sleep 30
          curl -f http://localhost:8000/health/status || exit 1
          
          # Switch traffic back to green
          sudo nginx -s reload
          
          # Stop failed blue environment
          docker-compose -f docker-compose.blue.yml down
          
          echo "Rollback completed successfully"
        EOF
        
        rm prod_key
    
    - name: Notify rollback
      run: |
        echo "Production rollback completed due to deployment failure"